Equality Procedures for boolean and string

Optional:
Michaux did not implement type checking on the arguments
since by his consideration bootstrap shouldn't require it
since good input -> good output

maybe consider adding type checking?

Named Let for recursive procedures:

(letrec ((<lambda-name> <lambda>)) (<lambda-name> <init-arg1> <init-arg2> ...))

can be written as just

(let <lambda-name> ((<lambda-param1> <init-arg1>) ... (<lambda-param N> <init-arg N>))
    <lambda-body>)

in the body of eval_named_let_form we have the list as args
( ((<lambda-param1> <init-arg1>)

after the while loop we have the following objects
lambda_name <--- <lambda-name>
lambda_params <--- (<lambda-param1> ... <lambda-param N>)
lambda_args <--- (<init-arg1> ... <init-arg N>)
body <--- <lambda-body>


what should work:

(let loop ((i 10)) (if (= 0 i) () (cons i (loop (- i 1)))))

is equivalent to

(letrec ((loop (lambda (i) (if (= 0 i) () (cons i (loop (- i 1))))))) (loop 10))

and prints

(10 9 8 7 6 5 4 3 2 1)

Generated output:
(letrec ((loop (lambda (i) (if (= i 0) () (cons i (loop (- i 1))))))) (loop 10))
(letrec ((loop (lambda (i) (if (= 0 i) () (cons i (loop (- i 1))))))) (loop 10))
actual ^^
